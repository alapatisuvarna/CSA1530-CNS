from math import gcd
def mod_inverse(a, m):
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    return None
def encrypt_affine(plaintext, a, b):
    if gcd(a, 26) != 1:
        raise ValueError("Key 'a' must be coprime with 26.")
    result = ""
    for char in plaintext.upper():
        if char.isalpha():
            p = ord(char) - ord('A')
            c = (a * p + b) % 26
            result += chr(c + ord('A'))
        else:
            result += char  # Keep spaces or punctuation
    return result
def decrypt_affine(ciphertext, a, b):
    if gcd(a, 26) != 1:
        raise ValueError("Key 'a' must be coprime with 26.")
    a_inv = mod_inverse(a, 26)
    if a_inv is None:
        raise ValueError("Multiplicative inverse for 'a' doesn't exist.")
    result = ""
    for char in ciphertext.upper():
        if char.isalpha():
            c = ord(char) - ord('A')
            p = (a_inv * (c - b)) % 26
            result += chr(p + ord('A'))
        else:
            result += char
    return result
a = int(input("Enter key 'a' (must be coprime with 26): "))
b = int(input("Enter key 'b' (0-25): "))
text = input("Enter plaintext: ")
try:
    encrypted = encrypt_affine(text, a, b)
    print("Encrypted:", encrypted)
    decrypted = decrypt_affine(encrypted, a, b)
    print("Decrypted:", decrypted)
except ValueError as e:
    print("Error:", e)
