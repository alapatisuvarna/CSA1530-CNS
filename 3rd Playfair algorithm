def create_matrix(key):
    key = key.lower().replace('j', 'i')
    matrix = ""
    for char in key:
        if char not in matrix and char.isalpha():
            matrix += char
    for char in "abcdefghiklmnopqrstuvwxyz":
        if char not in matrix:
            matrix += char
    return [list(matrix[i:i+5]) for i in range(0, 25, 5)]
def find_position(matrix, char):
    for row in range(5):
        for col in range(5):
            if matrix[row][col] == char:
                return row, col
    return None
def prepare_text(text):
    text = text.lower().replace('j', 'i').replace(" ", "")
    prepared = ""
    i = 0
    while i < len(text):
        a = text[i]
        b = text[i+1] if i+1 < len(text) else 'x'
        if a == b:
            prepared += a + 'x'
            i += 1
        else:
            prepared += a + b
            i += 2
    if len(prepared) % 2 != 0:
        prepared += 'x'
    return prepared
def encrypt_pair(a, b, matrix):
    row1, col1 = find_position(matrix, a)
    row2, col2 = find_position(matrix, b)
    if row1 == row2:
        return matrix[row1][(col1 + 1) % 5] + matrix[row2][(col2 + 1) % 5]
    elif col1 == col2:
        return matrix[(row1 + 1) % 5][col1] + matrix[(row2 + 1) % 5][col2]
    else:
        return matrix[row1][col2] + matrix[row2][col1]
def encrypt(text, key):
    matrix = create_matrix(key)
    text = prepare_text(text)
    result = ""
    for i in range(0, len(text), 2):
        result += encrypt_pair(text[i], text[i+1], matrix)
    return result
key = input("Enter keyword: ")
text = input("Enter message: ")
cipher = encrypt(text, key)
print("Encrypted message:", cipher.upper())
